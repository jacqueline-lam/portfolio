{"ast":null,"code":"// when action is dispatched to reducer,\n// reducer is automatically passed previous state as 1st arg\n// Everytime we update sth in our store, this reducer will be returning the updated state\nconst projectsReducer = (state = {\n  projects: [],\n  stacks: [],\n  selectedStackIds: [],\n  filteredProjects: [],\n  comments: [],\n  loading: false\n}, action) => {\n  let stackIds = state.selectedStackIds;\n\n  switch (action.type) {\n    case 'LOADING_STACKS':\n      return { ...state,\n        stacks: [...state.stacks],\n        loading: true\n      };\n\n    case 'ADD_STACKS':\n      return { ...state,\n        stacks: action.stacks,\n        loading: false\n      };\n\n    case 'LOADING_PROJECTS':\n      return { ...state,\n        projects: [...state.projects],\n        loading: true\n      };\n\n    case 'ADD_PROJECTS':\n      return { ...state,\n        projects: action.projects,\n        filteredProjects: action.projects,\n        loading: false\n      };\n\n    case 'ADD_FILTER':\n      const filterProjects = state.filteredProjects.filter(proj => {\n        return proj.stacks.some(stack => stack.id.toString() === action.stackId);\n      });\n      stackIds.push(action.stackId);\n      stackIds = [...new Set(stackIds)];\n      console.log('action.stackId', typeof action.stackId, action.stackId);\n      console.log('stackIds', typeof stackIds, stackIds);\n      return { ...state,\n        selectedStackIds: stackIds,\n        filteredProjects: filterProjects\n      };\n\n    case 'REMOVE_FILTER':\n      stackIds = state.selectedStackIds;\n      stackIds.splice(stackIds.indexOf(action.stackId), 1);\n      let filteredProjects = state.projects;\n\n      if (stackIds.length > 0) {\n        filteredProjects = state.projects.filter(proj => {\n          return proj.stacks.some(stack => stackIds.includes(stack.id.toString()));\n        });\n      }\n\n      console.log('action.stackId', typeof action.stackId, action.stackId);\n      console.log('stackIds', typeof stackIds, stackIds);\n      return { ...state,\n        filteredProjects: filteredProjects,\n        selectedStackIds: stackIds\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default projectsReducer;","map":{"version":3,"sources":["/Users/jackie.lam/Projects/portfolio/portfolio-frontend/src/reducers/projectsReducer.js"],"names":["projectsReducer","state","projects","stacks","selectedStackIds","filteredProjects","comments","loading","action","stackIds","type","filterProjects","filter","proj","some","stack","id","toString","stackId","push","Set","console","log","splice","indexOf","length","includes"],"mappings":"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","sourcesContent":["// when action is dispatched to reducer,\n// reducer is automatically passed previous state as 1st arg\n// Everytime we update sth in our store, this reducer will be returning the updated state\nconst projectsReducer = (state = { projects: [], stacks: [], selectedStackIds: [], filteredProjects: [], comments: [], loading: false }, action) => {\n  let stackIds = state.selectedStackIds\n\n  switch (action.type) {\n    case 'LOADING_STACKS':\n      return {\n        ...state,\n        stacks: [...state.stacks],\n        loading: true\n      }\n\n    case 'ADD_STACKS':\n      return {\n        ...state,\n        stacks: action.stacks,\n        loading: false\n      }\n\n    case 'LOADING_PROJECTS':\n      return {\n        ...state,\n        projects: [...state.projects],\n        loading: true\n      }\n\n    case 'ADD_PROJECTS':\n      return {\n        ...state,\n        projects: action.projects,\n        filteredProjects: action.projects,\n        loading: false\n      }\n\n    case 'ADD_FILTER':\n      const filterProjects = state.filteredProjects.filter(proj => {\n        return proj.stacks.some(stack => stack.id.toString() === action.stackId)\n      })\n\n      stackIds.push(action.stackId)\n      stackIds = [...new Set(stackIds)]\n\n      console.log('action.stackId', typeof action.stackId, action.stackId)\n      console.log('stackIds', typeof stackIds, stackIds)\n\n      return {\n        ...state,\n        selectedStackIds: stackIds,\n        filteredProjects: filterProjects,\n      }\n\n    case 'REMOVE_FILTER':\n      stackIds = state.selectedStackIds\n      stackIds.splice(stackIds.indexOf(action.stackId), 1)\n\n      let filteredProjects = state.projects\n      if (stackIds.length > 0) {\n        filteredProjects = state.projects.filter(proj => {\n          return proj.stacks.some(stack => stackIds.includes(stack.id.toString()))\n        })\n      }\n\n\n      console.log('action.stackId', typeof action.stackId, action.stackId)\n      console.log('stackIds', typeof stackIds, stackIds)\n\n      return {\n        ...state,\n        filteredProjects: filteredProjects,\n        selectedStackIds: stackIds,\n      }\n\n    default:\n      return state;\n  }\n}\n\n\nexport default projectsReducer;\n"]},"metadata":{},"sourceType":"module"}