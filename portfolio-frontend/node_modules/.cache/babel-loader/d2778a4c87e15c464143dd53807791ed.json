{"ast":null,"code":"var _jsxFileName = \"/Users/jackie.lam/Projects/portfolio/portfolio-frontend/src/components/projects/ProjectFilters.js\";\nimport React, { Component } from 'react';\n\nclass ProjectFilters extends Component {\n  constructor(...args) {\n    super(...args);\n    this.stacks = [\"ActiveRecord\", \"BCrypt\", \"Bootstrap\", \"CRUD\", \"HTML & CSS\", \"Fetch API\", \"JavaScript\", \"MVC\", \"Nokogiri\", \"Omniauth\", \"PostgreSQL\", \"React.JS\", \"React Router\", \"Redux\", \"Redux Thunk\", \"RESTful API\", \"Ruby\", \"Ruby on Rails\", \"Sinatra\", \"SQLite3\"];\n    this.state = {\n      stacks: []\n    };\n\n    this.handleOnClick = event => {\n      document.getElementById('allBtn');\n      let pressed = event.target.getAttribute(\"aria-pressed\") === \"true\";\n      const stackClicked = event.target.value;\n\n      if (!pressed) {\n        this.setState(prevState => ({\n          stacks: [...prevState.stacks, stackClicked]\n        }));\n        event.target.setAttribute(\"aria-pressed\", \"true\");\n        event.target.classList.add('active');\n      } else {\n        this.setState(prevState => ({\n          stacks: prevState.stacks.filter(stack => stack !== stackClicked)\n        }));\n        event.target.setAttribute(\"aria-pressed\", \"false\");\n        event.target.classList.remove('active');\n      } // this.props.filterProjects(this.state.stacks);\n      // console.log(pressed)\n      // console.log(this.state.stacks)\n\n    };\n\n    this.renderStackBtn = stack => {\n      return (\n        /*#__PURE__*/\n        // <label className=\"btn btn-outline-secondary\" >\n        //   <input type=\"checkbox\" autocomplete=\"off\" value={stack} aria-pressed=\"false\" onClick={this.handleOnClick} /> {stack}\n        // </label>\n        React.createElement(\"button\", {\n          type: \"button\",\n          className: \"btn btn-outline-primary btn-sm\",\n          \"aria-pressed\": \"false\",\n          value: stack,\n          onClick: this.handleOnClick,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 7\n          }\n        }, stack)\n      );\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"btn-group-toggle\",\n      \"data-toggle\": \"buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      id: \"allBtn\",\n      className: \"btn btn-outline-primary btn-sm active\",\n      \"aria-pressed\": \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }, \"All\"), this.stacks.map(stack => this.renderStackBtn(stack)));\n  }\n\n} // const ProjectFilters = ({ projects }) => {\n//   const stacks = [\"ActiveRecord\", \"BCrypt\", \"Bootstrap\", \"CRUD\", \"HTML & CSS\", \"Fetch API\", \"JavaScript\", \"MVC\", \"Nokogiri\", \"Omniauth\", \"PostgreSQL\", \"React.JS\", \"React Router\", \"Redux\", \"Redux Thunk\", \"RESTful API\", \"Ruby\", \"Ruby on Rails\", \"Sinatra\", \"SQLite3\"]\n//   // render buttons of stacks\n//   // if a button is clicked, update chosenStacks array in state\n//   console.log(projects.map(project.stacks))\n//   // display projects with selected stacks\n//   return (\n//     <div>\n//       {projects.map(project => <ProjectList key={project.id} project={project} />)}\n//     </div>\n//   );\n// };\n\n\nexport default ProjectFilters;","map":{"version":3,"sources":["/Users/jackie.lam/Projects/portfolio/portfolio-frontend/src/components/projects/ProjectFilters.js"],"names":["React","Component","ProjectFilters","stacks","state","handleOnClick","event","document","getElementById","pressed","target","getAttribute","stackClicked","value","setState","prevState","setAttribute","classList","add","filter","stack","remove","renderStackBtn","render","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,cAAN,SAA6BD,SAA7B,CAAuC;AAAA;AAAA;AAAA,SACrCE,MADqC,GAC5B,CAAC,cAAD,EAAiB,QAAjB,EAA2B,WAA3B,EAAwC,MAAxC,EAAgD,YAAhD,EAA8D,WAA9D,EAA2E,YAA3E,EAAyF,KAAzF,EAAgG,UAAhG,EAA4G,UAA5G,EAAwH,YAAxH,EAAsI,UAAtI,EAAkJ,cAAlJ,EAAkK,OAAlK,EAA2K,aAA3K,EAA0L,aAA1L,EAAyM,MAAzM,EAAiN,eAAjN,EAAkO,SAAlO,EAA6O,SAA7O,CAD4B;AAAA,SAErCC,KAFqC,GAE7B;AACND,MAAAA,MAAM,EAAE;AADF,KAF6B;;AAAA,SAMrCE,aANqC,GAMrBC,KAAK,IAAI;AACvBC,MAAAA,QAAQ,CAACC,cAAT,CAAwB,QAAxB;AACA,UAAIC,OAAO,GAAIH,KAAK,CAACI,MAAN,CAAaC,YAAb,CAA0B,cAA1B,MAA8C,MAA7D;AACA,YAAMC,YAAY,GAAGN,KAAK,CAACI,MAAN,CAAaG,KAAlC;;AAEA,UAAI,CAACJ,OAAL,EAAc;AACZ,aAAKK,QAAL,CAAcC,SAAS,KAAK;AAC1BZ,UAAAA,MAAM,EAAE,CAAC,GAAGY,SAAS,CAACZ,MAAd,EAAsBS,YAAtB;AADkB,SAAL,CAAvB;AAGAN,QAAAA,KAAK,CAACI,MAAN,CAAaM,YAAb,CAA0B,cAA1B,EAA0C,MAA1C;AACAV,QAAAA,KAAK,CAACI,MAAN,CAAaO,SAAb,CAAuBC,GAAvB,CAA2B,QAA3B;AACD,OAND,MAMO;AACL,aAAKJ,QAAL,CAAcC,SAAS,KAAK;AAC1BZ,UAAAA,MAAM,EAAEY,SAAS,CAACZ,MAAV,CAAiBgB,MAAjB,CAAwBC,KAAK,IAAIA,KAAK,KAAKR,YAA3C;AADkB,SAAL,CAAvB;AAGAN,QAAAA,KAAK,CAACI,MAAN,CAAaM,YAAb,CAA0B,cAA1B,EAA0C,OAA1C;AACAV,QAAAA,KAAK,CAACI,MAAN,CAAaO,SAAb,CAAuBI,MAAvB,CAA8B,QAA9B;AACD,OAjBsB,CAmBvB;AACA;AACA;;AACD,KA5BoC;;AAAA,SAsCrCC,cAtCqC,GAsCpBF,KAAK,IAAI;AACxB;AAAA;AACE;AACA;AACA;AACA;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,SAAS,EAAC,gCAAhC;AAAiE,0BAAa,OAA9E;AAAsF,UAAA,KAAK,EAAEA,KAA7F;AAAoG,UAAA,OAAO,EAAE,KAAKf,aAAlH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGe,KADH;AAJF;AAQD,KA/CoC;AAAA;;AAiDrCG,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAkC,qBAAY,SAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAME;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,EAAE,EAAC,QAAzB;AAAkC,MAAA,SAAS,EAAC,uCAA5C;AAAoF,sBAAa,MAAjG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aANF,EASG,KAAKpB,MAAL,CAAYqB,GAAZ,CAAgBJ,KAAK,IAAI,KAAKE,cAAL,CAAoBF,KAApB,CAAzB,CATH,CADF;AAiBD;;AAnEoC,C,CAsEvC;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAelB,cAAf","sourcesContent":["import React, { Component } from 'react'\n\nclass ProjectFilters extends Component {\n  stacks = [\"ActiveRecord\", \"BCrypt\", \"Bootstrap\", \"CRUD\", \"HTML & CSS\", \"Fetch API\", \"JavaScript\", \"MVC\", \"Nokogiri\", \"Omniauth\", \"PostgreSQL\", \"React.JS\", \"React Router\", \"Redux\", \"Redux Thunk\", \"RESTful API\", \"Ruby\", \"Ruby on Rails\", \"Sinatra\", \"SQLite3\"]\n  state = {\n    stacks: []\n  }\n\n  handleOnClick = event => {\n    document.getElementById('allBtn')\n    let pressed = (event.target.getAttribute(\"aria-pressed\") === \"true\");\n    const stackClicked = event.target.value\n\n    if (!pressed) {\n      this.setState(prevState => ({\n        stacks: [...prevState.stacks, stackClicked]\n      }));\n      event.target.setAttribute(\"aria-pressed\", \"true\")\n      event.target.classList.add('active')\n    } else {\n      this.setState(prevState => ({\n        stacks: prevState.stacks.filter(stack => stack !== stackClicked),\n      }));\n      event.target.setAttribute(\"aria-pressed\", \"false\")\n      event.target.classList.remove('active')\n    }\n\n    // this.props.filterProjects(this.state.stacks);\n    // console.log(pressed)\n    // console.log(this.state.stacks)\n  }\n\n  // handleOnSubmit = event => {\n  //   event.preventDefault();\n  //   this.props.filterProjects(this.state.stacks);\n  //   this.setState({\n  //     stacks: '',\n  //   });\n  // }\n\n  renderStackBtn = stack => {\n    return (\n      // <label className=\"btn btn-outline-secondary\" >\n      //   <input type=\"checkbox\" autocomplete=\"off\" value={stack} aria-pressed=\"false\" onClick={this.handleOnClick} /> {stack}\n      // </label>\n      <button type=\"button\" className=\"btn btn-outline-primary btn-sm\" aria-pressed='false' value={stack} onClick={this.handleOnClick}>\n        {stack}\n      </button>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"btn-group-toggle\" data-toggle=\"buttons\" >\n        {/* <form onSubmit={this.handleOnSubmit}>\n          <fieldset>\n            <label className=\"btn btn-outline-secondary active\">\n              <input type=\"checkbox\" checked=\"\" aria-pressed=\"true\" /> All\n            </label> */}\n        <button type=\"button\" id=\"allBtn\" className=\"btn btn-outline-primary btn-sm active\" aria-pressed=\"true\" >\n          All\n        </button>\n        {this.stacks.map(stack => this.renderStackBtn(stack))}\n        {/* <input type=\"submit\" />\n          </fieldset>\n        </form> */}\n      </div >\n\n    );\n  }\n}\n\n// const ProjectFilters = ({ projects }) => {\n//   const stacks = [\"ActiveRecord\", \"BCrypt\", \"Bootstrap\", \"CRUD\", \"HTML & CSS\", \"Fetch API\", \"JavaScript\", \"MVC\", \"Nokogiri\", \"Omniauth\", \"PostgreSQL\", \"React.JS\", \"React Router\", \"Redux\", \"Redux Thunk\", \"RESTful API\", \"Ruby\", \"Ruby on Rails\", \"Sinatra\", \"SQLite3\"]\n\n//   // render buttons of stacks\n//   // if a button is clicked, update chosenStacks array in state\n//   console.log(projects.map(project.stacks))\n//   // display projects with selected stacks\n\n//   return (\n//     <div>\n//       {projects.map(project => <ProjectList key={project.id} project={project} />)}\n//     </div>\n//   );\n// };\n\nexport default ProjectFilters;"]},"metadata":{},"sourceType":"module"}