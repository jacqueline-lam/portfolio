{"ast":null,"code":"var _jsxFileName = \"/Users/jackie.lam/Projects/portfolio/portfolio-frontend/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; // Any component wrapped in Provider will have access to redux store\n\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom'; // Compose combine diff middlewares into 1 - to pass in all middleware as 1 argument in createStore\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport App from './App';\nimport rootReducer from \"./reducers/rootReducer\"; // enable Redux DevTools Extension\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; // Pass reducer into createStore, assigning return value to store\n// configure thunk by passing in thunk as part of the composeEnhancer\n// STORE = where you store data globally\n// REDUCER = responsible for taking in action & deciding what to update about current store\n// and return new version of store\n// ACTIONS will be dispatched to our reducer\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\nReactDOM.render(\n/*#__PURE__*/\n// any component in App can now set up routes and links\n// pass store into Provider - allow us access when we connect our components\nReact.createElement(Provider, {\n  store: store,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(Router, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 7\n  }\n}))), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();","map":{"version":3,"sources":["/Users/jackie.lam/Projects/portfolio/portfolio-frontend/src/index.js"],"names":["React","ReactDOM","Provider","BrowserRouter","Router","createStore","applyMiddleware","compose","thunk","App","rootReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP,C,CAEA;;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,aAAa,IAAIC,MAA1B,QAAwC,kBAAxC,C,CACA;;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,WAAP,MAAwB,wBAAxB,C,CAEA;;AACA,MAAMC,gBAAgB,GAAGC,MAAM,CAACC,oCAAP,IAA+CN,OAAxE,C,CAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMO,KAAK,GAAGT,WAAW,CACvBK,WADuB,EAEvBC,gBAAgB,CAACL,eAAe,CAACE,KAAD,CAAhB,CAFO,CAAzB;AAKAP,QAAQ,CAACc,MAAT;AAAA;AACE;AACA;AACA,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAED,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,CAHF,EAQEE,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CARF,E,CAWA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n// Any component wrapped in Provider will have access to redux store\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\n// Compose combine diff middlewares into 1 - to pass in all middleware as 1 argument in createStore\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport App from './App';\nimport rootReducer from \"./reducers/rootReducer\";\n\n// enable Redux DevTools Extension\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n// Pass reducer into createStore, assigning return value to store\n// configure thunk by passing in thunk as part of the composeEnhancer\n// STORE = where you store data globally\n// REDUCER = responsible for taking in action & deciding what to update about current store\n// and return new version of store\n// ACTIONS will be dispatched to our reducer\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk))\n)\n\nReactDOM.render(\n  // any component in App can now set up routes and links\n  // pass store into Provider - allow us access when we connect our components\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}