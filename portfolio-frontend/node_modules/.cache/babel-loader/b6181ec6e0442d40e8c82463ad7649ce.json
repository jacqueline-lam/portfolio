{"ast":null,"code":"// when action is dispatched to reducer,\n// reducer is automatically passed previous state as 1st arg\n// Everytime we update sth in our store, this reducer will be returning the updated state\nconst projectsReducer = (state = {\n  projects: [],\n  stacks: [],\n  selectedStackIds: [],\n  filteredProjects: [],\n  comments: [],\n  loading: false\n}, action) => {\n  let stackIds = state.selectedStackIds;\n  let filteredProjects = [];\n\n  switch (action.type) {\n    case 'LOADING_STACKS':\n      return { ...state,\n        stacks: [...state.stacks],\n        loading: true\n      };\n\n    case 'ADD_STACKS':\n      return { ...state,\n        stacks: action.stacks,\n        loading: false\n      };\n\n    case 'LOADING_PROJECTS':\n      return { ...state,\n        projects: [...state.projects],\n        loading: true\n      };\n\n    case 'ADD_PROJECTS':\n      return { ...state,\n        projects: action.projects,\n        filteredProjects: action.projects,\n        loading: false\n      };\n\n    case 'ADD_FILTER':\n      filteredProjects = state.filteredProjects.filter(proj => {\n        return proj.stacks.some(stack => stack.id.toString() === action.stackId);\n      });\n      stackIds.push(action.stackId); // Set store unique stackIds\n\n      stackIds = [...new Set(stackIds)];\n      console.log('action.stackId', typeof action.stackId, action.stackId);\n      console.log('stackIds', typeof stackIds, stackIds);\n      console.log('filteredProjects', typeof filteredProjects, filteredProjects);\n      return { ...state,\n        selectedStackIds: stackIds,\n        filteredProjects: filteredProjects\n      };\n\n    case 'REMOVE_FILTER':\n      stackIds = state.selectedStackIds;\n      stackIds.splice(stackIds.indexOf(action.stackId), 1);\n      filteredProjects = state.projects;\n\n      if (stackIds.length > 0) {\n        filteredProjects = state.projects.filter(proj => {\n          return proj.stacks.some(stack => stackIds.includes(stack.id.toString()));\n        });\n      }\n\n      console.log('action.stackId', typeof action.stackId, action.stackId);\n      console.log('stackIds', typeof stackIds, stackIds);\n      return { ...state,\n        filteredProjects: filteredProjects,\n        selectedStackIds: stackIds\n      };\n\n    case 'ADD_COMMENT':\n    default:\n      return state;\n  }\n};\n\nexport default projectsReducer;","map":{"version":3,"sources":["/Users/jackie.lam/Projects/portfolio/portfolio-frontend/src/reducers/projectsReducer.js"],"names":["projectsReducer","state","projects","stacks","selectedStackIds","filteredProjects","comments","loading","action","stackIds","type","filter","proj","some","stack","id","toString","stackId","push","Set","console","log","splice","indexOf","length","includes"],"mappings":"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","sourcesContent":["// when action is dispatched to reducer,\n// reducer is automatically passed previous state as 1st arg\n// Everytime we update sth in our store, this reducer will be returning the updated state\nconst projectsReducer = (state = {\n  projects: [],\n  stacks: [],\n  selectedStackIds: [],\n  filteredProjects: [],\n  comments: [],\n  loading: false,\n}, action) => {\n  let stackIds = state.selectedStackIds\n  let filteredProjects = []\n\n  switch (action.type) {\n    case 'LOADING_STACKS':\n      return {\n        ...state,\n        stacks: [...state.stacks],\n        loading: true\n      }\n\n    case 'ADD_STACKS':\n      return {\n        ...state,\n        stacks: action.stacks,\n        loading: false\n      }\n\n    case 'LOADING_PROJECTS':\n      return {\n        ...state,\n        projects: [...state.projects],\n        loading: true\n      }\n\n    case 'ADD_PROJECTS':\n      return {\n        ...state,\n        projects: action.projects,\n        filteredProjects: action.projects,\n        loading: false\n      }\n\n    case 'ADD_FILTER':\n      filteredProjects = state.filteredProjects.filter(proj => {\n        return proj.stacks.some(stack => stack.id.toString() === action.stackId)\n      })\n\n      stackIds.push(action.stackId)\n      // Set store unique stackIds\n      stackIds = [...new Set(stackIds)]\n\n      console.log('action.stackId', typeof action.stackId, action.stackId)\n      console.log('stackIds', typeof stackIds, stackIds)\n      console.log('filteredProjects', typeof filteredProjects, filteredProjects)\n\n      return {\n        ...state,\n        selectedStackIds: stackIds,\n        filteredProjects: filteredProjects,\n      }\n\n    case 'REMOVE_FILTER':\n      stackIds = state.selectedStackIds\n      stackIds.splice(stackIds.indexOf(action.stackId), 1)\n\n      filteredProjects = state.projects\n      if (stackIds.length > 0) {\n        filteredProjects = state.projects.filter(proj => {\n          return proj.stacks.some(stack => stackIds.includes(stack.id.toString()))\n        })\n      }\n\n      console.log('action.stackId', typeof action.stackId, action.stackId)\n      console.log('stackIds', typeof stackIds, stackIds)\n\n      return {\n        ...state,\n        filteredProjects: filteredProjects,\n        selectedStackIds: stackIds,\n      }\n\n    case 'ADD_COMMENT':\n\n    default:\n      return state;\n  }\n}\n\n\nexport default projectsReducer;\n"]},"metadata":{},"sourceType":"module"}