{"ast":null,"code":"// when action is dispatched to reducer,\n// reducer is passed current state and dispatched action\n// Everytime we update sth in our store, this reducer will return updated state\nconst projectsReducer = (state = {\n  allProjects: [],\n  stacks: [],\n  selectedStackIds: [],\n  filteredProjects: [],\n  loading: false\n}, action) => {\n  let stackIds;\n  let filteredProjects = [];\n\n  switch (action.type) {\n    case 'LOADING_STACKS':\n      return { ...state,\n        stacks: [...state.stacks],\n        loading: true\n      };\n\n    case 'ADD_STACKS':\n      return { ...state,\n        stacks: action.stacks,\n        loading: false\n      };\n\n    case 'LOADING_PROJECTS':\n      return { ...state,\n        allProjects: [...state.allProjects],\n        loading: true\n      };\n\n    case 'ADD_PROJECTS':\n      return { ...state,\n        allProjects: action.projects,\n        filteredProjects: action.projects,\n        loading: false\n      };\n\n    case 'ADD_FILTER':\n      // filter projects with the chosen stack\n      filteredProjects = state.filteredProjects.filter(proj => {\n        return proj.stacks.some(stack => stack.id.toString() === action.stackId);\n      });\n      stackIds = state.selectedStackIds.concat(action.stackId); // Set store unique stackIds\n\n      stackIds = [...new Set(stackIds)];\n      console.log('action.stackId = ', typeof action.stackId, action.stackId);\n      console.log('stackIds = ', typeof stackIds, stackIds);\n      console.log('filteredProjects = ', typeof filteredProjects, filteredProjects);\n      return { ...state,\n        selectedStackIds: stackIds,\n        filteredProjects: filteredProjects\n      };\n\n    case 'REMOVE_FILTER':\n      stackIds = state.selectedStackIds;\n      stackIds.splice(stackIds.indexOf(action.stackId), 1);\n      filteredProjects = state.allProjects; // only include projects that have all the selected stacks\n\n      if (stackIds.length > 0) {\n        filteredProjects = state.allProjects.filter(proj => {\n          const projectStacks = proj.stacks.map(proj => proj['id'].toString());\n          const includesSelectedStacks = stackIds.every(selectedStack => projectStacks.includes(selectedStack));\n          return includesSelectedStacks;\n        });\n      }\n\n      console.log('action.stackId', typeof action.stackId, action.stackId);\n      console.log('stackIds', typeof stackIds, stackIds);\n      console.log('filteredProjects', typeof filteredProjects, filteredProjects);\n      return { ...state,\n        filteredProjects: filteredProjects,\n        selectedStackIds: stackIds\n      };\n\n    case 'ADD_COMMENT':\n      let index = state.filteredProjects.findIndex(project => project.id === action.comment.project_id);\n      let project = state.filteredProjects[index];\n      return { ...state,\n        filteredProjects: [...state.filteredProjects.slice(0, index), // concatnenating new values when comment form is submitted\n        { ...project,\n          comments: project.comments.concat(action.comment)\n        }, ...state.filteredProjects.slice(index + 1)]\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default projectsReducer;","map":{"version":3,"sources":["/Users/jackie.lam/Projects/portfolio/portfolio-frontend/src/reducers/projectsReducer.js"],"names":["projectsReducer","state","allProjects","stacks","selectedStackIds","filteredProjects","loading","action","stackIds","type","projects","filter","proj","some","stack","id","toString","stackId","concat","Set","console","log","splice","indexOf","length","projectStacks","map","includesSelectedStacks","every","selectedStack","includes","index","findIndex","project","comment","project_id","slice","comments"],"mappings":"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","sourcesContent":["// when action is dispatched to reducer,\n// reducer is passed current state and dispatched action\n// Everytime we update sth in our store, this reducer will return updated state\nconst projectsReducer = (state = {\n  allProjects: [],\n  stacks: [],\n  selectedStackIds: [],\n  filteredProjects: [],\n  loading: false,\n}, action) => {\n  let stackIds;\n  let filteredProjects = []\n\n  switch (action.type) {\n    case 'LOADING_STACKS':\n      return {\n        ...state,\n        stacks: [...state.stacks],\n        loading: true\n      }\n\n    case 'ADD_STACKS':\n      return {\n        ...state,\n        stacks: action.stacks,\n        loading: false\n      }\n\n    case 'LOADING_PROJECTS':\n      return {\n        ...state,\n        allProjects: [...state.allProjects],\n        loading: true\n      }\n\n    case 'ADD_PROJECTS':\n      return {\n        ...state,\n        allProjects: action.projects,\n        filteredProjects: action.projects,\n        loading: false\n      }\n\n    case 'ADD_FILTER':\n      // filter projects with the chosen stack\n      filteredProjects = state.filteredProjects.filter(proj => {\n        return proj.stacks.some(stack => stack.id.toString() === action.stackId)\n      })\n\n      stackIds = state.selectedStackIds.concat(action.stackId)\n      // Set store unique stackIds\n      stackIds = [...new Set(stackIds)]\n\n      console.log('action.stackId = ', typeof action.stackId, action.stackId)\n      console.log('stackIds = ', typeof stackIds, stackIds)\n      console.log('filteredProjects = ', typeof filteredProjects, filteredProjects)\n\n      return {\n        ...state,\n        selectedStackIds: stackIds,\n        filteredProjects: filteredProjects,\n      }\n\n    case 'REMOVE_FILTER':\n      stackIds = state.selectedStackIds\n      stackIds.splice(stackIds.indexOf(action.stackId), 1)\n\n      filteredProjects = state.allProjects\n      // only include projects that have all the selected stacks\n      if (stackIds.length > 0) {\n        filteredProjects = state.allProjects.filter(proj => {\n          const projectStacks = proj.stacks.map(proj => proj['id'].toString())\n          const includesSelectedStacks = stackIds.every(selectedStack =>\n            projectStacks.includes(selectedStack)\n          )\n          return includesSelectedStacks\n        })\n      }\n      console.log('action.stackId', typeof action.stackId, action.stackId)\n      console.log('stackIds', typeof stackIds, stackIds)\n      console.log('filteredProjects', typeof filteredProjects, filteredProjects)\n\n      return {\n        ...state,\n        filteredProjects: filteredProjects,\n        selectedStackIds: stackIds,\n      }\n\n    case 'ADD_COMMENT':\n      let index = state.filteredProjects.findIndex(project => project.id === action.comment.project_id);\n      let project = state.filteredProjects[index];\n\n      return {\n        ...state,\n        filteredProjects: [\n          ...state.filteredProjects.slice(0, index),\n          // concatnenating new values when comment form is submitted\n          { ...project, comments: project.comments.concat(action.comment) },\n          ...state.filteredProjects.slice(index + 1)\n        ]\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default projectsReducer;\n"]},"metadata":{},"sourceType":"module"}