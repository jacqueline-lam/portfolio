{"ast":null,"code":"// when action is dispatched to reducer,\n// reducer is automatically passed previous state as 1st arg\n// Everytime we update sth in our store, this reducer will be returning the updated state\nconst projectsReducer = (state = {\n  projects: [],\n  comments: [],\n  loading: false\n}, action) => {\n  switch (action.type) {\n    case 'LOADING_PROJECTS':\n      return { ...state,\n        projects: [...state.projects],\n        loading: true\n      };\n\n    case 'ADD_PROJECTS':\n      const reformatProjects = projects => {\n        return projects.forEach(proj => {\n          proj.stacks.stacks.map(stack => Object.values(stack)).flat();\n        });\n      };\n\n      return { ...state,\n        projects: reformatProjects(),\n        loading: false\n      };\n    // case 'FILTER_PROJECTS':\n    //   return {\n    //     ...state,\n    //     projects: state.projects.filter(proj => proj.stacks.include(action.stack))\n    //   }\n\n    default:\n      return state;\n  }\n};\n\nexport default projectsReducer;","map":{"version":3,"sources":["/Users/jackie.lam/Projects/portfolio/portfolio-frontend/src/reducers/projectsReducer.js"],"names":["projectsReducer","state","projects","comments","loading","action","type","reformatProjects","forEach","proj","stacks","map","stack","Object","values","flat"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,eAAe,GAAG,CAACC,KAAK,GAAG;AAAEC,EAAAA,QAAQ,EAAE,EAAZ;AAAgBC,EAAAA,QAAQ,EAAE,EAA1B;AAA8BC,EAAAA,OAAO,EAAE;AAAvC,CAAT,EAAyDC,MAAzD,KAAoE;AAC1F,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,kBAAL;AACE,aAAO,EACL,GAAGL,KADE;AAELC,QAAAA,QAAQ,EAAE,CAAC,GAAGD,KAAK,CAACC,QAAV,CAFL;AAGLE,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAMF,SAAK,cAAL;AACE,YAAMG,gBAAgB,GAAGL,QAAQ,IAAI;AACnC,eAAOA,QAAQ,CAACM,OAAT,CAAiBC,IAAI,IAAI;AAC9BA,UAAAA,IAAI,CAACC,MAAL,CAAYA,MAAZ,CAAmBC,GAAnB,CAAuBC,KAAK,IAAIC,MAAM,CAACC,MAAP,CAAcF,KAAd,CAAhC,EAAsDG,IAAtD;AACD,SAFM,CAAP;AAGD,OAJD;;AAKA,aAAO,EACL,GAAGd,KADE;AAELC,QAAAA,QAAQ,EAAEK,gBAAgB,EAFrB;AAGLH,QAAAA,OAAO,EAAE;AAHJ,OAAP;AAMF;AACA;AACA;AACA;AACA;;AAEA;AACE,aAAOH,KAAP;AA3BJ;AA6BD,CA9BD;;AAiCA,eAAeD,eAAf","sourcesContent":["// when action is dispatched to reducer,\n// reducer is automatically passed previous state as 1st arg\n// Everytime we update sth in our store, this reducer will be returning the updated state\nconst projectsReducer = (state = { projects: [], comments: [], loading: false }, action) => {\n  switch (action.type) {\n    case 'LOADING_PROJECTS':\n      return {\n        ...state,\n        projects: [...state.projects],\n        loading: true\n      }\n\n    case 'ADD_PROJECTS':\n      const reformatProjects = projects => {\n        return projects.forEach(proj => {\n          proj.stacks.stacks.map(stack => Object.values(stack)).flat()\n        })\n      }\n      return {\n        ...state,\n        projects: reformatProjects(),\n        loading: false\n      }\n\n    // case 'FILTER_PROJECTS':\n    //   return {\n    //     ...state,\n    //     projects: state.projects.filter(proj => proj.stacks.include(action.stack))\n    //   }\n\n    default:\n      return state;\n  }\n}\n\n\nexport default projectsReducer;\n"]},"metadata":{},"sourceType":"module"}