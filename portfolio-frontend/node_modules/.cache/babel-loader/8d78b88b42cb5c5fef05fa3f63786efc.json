{"ast":null,"code":"// when action is dispatched to reducer,\n// reducer is automatically passed previous state as 1st arg\n// Everytime we update sth in our store, this reducer will be returning the updated state\nconst projectsReducer = (state = {\n  projects: [],\n  stacks: [],\n  selectedStackIds: [],\n  comments: [],\n  loading: false\n}, action) => {\n  switch (action.type) {\n    case 'LOADING_STACKS':\n      return { ...state,\n        stacks: [...state.stacks],\n        loading: true\n      };\n\n    case 'ADD_STACKS':\n      return { ...state,\n        stacks: action.stacks,\n        loading: false\n      };\n\n    case 'LOADING_PROJECTS':\n      return { ...state,\n        projects: [...state.projects],\n        loading: true\n      };\n\n    case 'ADD_PROJECTS':\n      return { ...state,\n        projects: action.projects,\n        loading: false\n      };\n\n    case 'ADD_FILTER':\n      let filteredProjects = state.projects.filter(proj => {\n        return proj.stacks.some(stack => stack.id.toString() === action.stackId);\n      });\n      console.log(filteredProjects);\n      return { ...state,\n        selectedStackIds: [...state.selectedStacks, action.stackId],\n        projects: filteredProjects\n      };\n\n    case 'REMOVE_FILTER':\n      let refilteredProjects = state.projects.filter(proj => {\n        return proj.stacks.some(stack => stack.id.toString() === action.stackId);\n      });\n      return { ...state,\n        selectedStackIds: state.selectedStackIds.filter(id => id !== action.stackId),\n        projects: refilteredProjects\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default projectsReducer;","map":{"version":3,"sources":["/Users/jackie.lam/Projects/portfolio/portfolio-frontend/src/reducers/projectsReducer.js"],"names":["projectsReducer","state","projects","stacks","selectedStackIds","comments","loading","action","type","filteredProjects","filter","proj","some","stack","id","toString","stackId","console","log","selectedStacks","refilteredProjects"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,eAAe,GAAG,CAACC,KAAK,GAAG;AAAEC,EAAAA,QAAQ,EAAE,EAAZ;AAAgBC,EAAAA,MAAM,EAAE,EAAxB;AAA4BC,EAAAA,gBAAgB,EAAE,EAA9C;AAAkDC,EAAAA,QAAQ,EAAE,EAA5D;AAAgEC,EAAAA,OAAO,EAAE;AAAzE,CAAT,EAA2FC,MAA3F,KAAsG;AAC5H,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,gBAAL;AACE,aAAO,EACL,GAAGP,KADE;AAELE,QAAAA,MAAM,EAAE,CAAC,GAAGF,KAAK,CAACE,MAAV,CAFH;AAGLG,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAMF,SAAK,YAAL;AACE,aAAO,EACL,GAAGL,KADE;AAELE,QAAAA,MAAM,EAAEI,MAAM,CAACJ,MAFV;AAGLG,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAMF,SAAK,kBAAL;AACE,aAAO,EACL,GAAGL,KADE;AAELC,QAAAA,QAAQ,EAAE,CAAC,GAAGD,KAAK,CAACC,QAAV,CAFL;AAGLI,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAMF,SAAK,cAAL;AACE,aAAO,EACL,GAAGL,KADE;AAELC,QAAAA,QAAQ,EAAEK,MAAM,CAACL,QAFZ;AAGLI,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAMF,SAAK,YAAL;AACE,UAAIG,gBAAgB,GAAGR,KAAK,CAACC,QAAN,CAAeQ,MAAf,CAAsBC,IAAI,IAAI;AACnD,eAAOA,IAAI,CAACR,MAAL,CAAYS,IAAZ,CAAiBC,KAAK,IAAIA,KAAK,CAACC,EAAN,CAASC,QAAT,OAAwBR,MAAM,CAACS,OAAzD,CAAP;AACD,OAFsB,CAAvB;AAGAC,MAAAA,OAAO,CAACC,GAAR,CAAYT,gBAAZ;AACA,aAAO,EACL,GAAGR,KADE;AAELG,QAAAA,gBAAgB,EAAE,CAAC,GAAGH,KAAK,CAACkB,cAAV,EAA0BZ,MAAM,CAACS,OAAjC,CAFb;AAGLd,QAAAA,QAAQ,EAAEO;AAHL,OAAP;;AAMF,SAAK,eAAL;AACE,UAAIW,kBAAkB,GAAGnB,KAAK,CAACC,QAAN,CAAeQ,MAAf,CAAsBC,IAAI,IAAI;AACrD,eAAOA,IAAI,CAACR,MAAL,CAAYS,IAAZ,CAAiBC,KAAK,IAAIA,KAAK,CAACC,EAAN,CAASC,QAAT,OAAwBR,MAAM,CAACS,OAAzD,CAAP;AACD,OAFwB,CAAzB;AAGA,aAAO,EACL,GAAGf,KADE;AAELG,QAAAA,gBAAgB,EAAEH,KAAK,CAACG,gBAAN,CAAuBM,MAAvB,CAA8BI,EAAE,IAAIA,EAAE,KAAKP,MAAM,CAACS,OAAlD,CAFb;AAGLd,QAAAA,QAAQ,EAAEkB;AAHL,OAAP;;AAMF;AACE,aAAOnB,KAAP;AAnDJ;AAqDD,CAtDD;;AAyDA,eAAeD,eAAf","sourcesContent":["// when action is dispatched to reducer,\n// reducer is automatically passed previous state as 1st arg\n// Everytime we update sth in our store, this reducer will be returning the updated state\nconst projectsReducer = (state = { projects: [], stacks: [], selectedStackIds: [], comments: [], loading: false }, action) => {\n  switch (action.type) {\n    case 'LOADING_STACKS':\n      return {\n        ...state,\n        stacks: [...state.stacks],\n        loading: true\n      }\n\n    case 'ADD_STACKS':\n      return {\n        ...state,\n        stacks: action.stacks,\n        loading: false\n      }\n\n    case 'LOADING_PROJECTS':\n      return {\n        ...state,\n        projects: [...state.projects],\n        loading: true\n      }\n\n    case 'ADD_PROJECTS':\n      return {\n        ...state,\n        projects: action.projects,\n        loading: false\n      }\n\n    case 'ADD_FILTER':\n      let filteredProjects = state.projects.filter(proj => {\n        return proj.stacks.some(stack => stack.id.toString() === action.stackId)\n      })\n      console.log(filteredProjects)\n      return {\n        ...state,\n        selectedStackIds: [...state.selectedStacks, action.stackId],\n        projects: filteredProjects\n      }\n\n    case 'REMOVE_FILTER':\n      let refilteredProjects = state.projects.filter(proj => {\n        return proj.stacks.some(stack => stack.id.toString() === action.stackId)\n      })\n      return {\n        ...state,\n        selectedStackIds: state.selectedStackIds.filter(id => id !== action.stackId),\n        projects: refilteredProjects\n      }\n\n    default:\n      return state;\n  }\n}\n\n\nexport default projectsReducer;\n"]},"metadata":{},"sourceType":"module"}