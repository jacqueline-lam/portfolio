{"ast":null,"code":"// when action is dispatched to reducer,\n// reducer is automatically passed previous state as 1st arg\n// Everytime we update sth in our store, this reducer will be returning the updated state\nconst projectsReducer = (state = {\n  projects: [],\n  stacks: [],\n  comments: [],\n  loading: false\n}, action) => {\n  switch (action.type) {\n    case 'LOADING_STACKS':\n      return { ...state,\n        stacks: [...state.stacks],\n        loading: true\n      };\n\n    case 'ADD_STACKS':\n      return { ...state,\n        stacks: action.stacks,\n        loading: false\n      };\n\n    case 'LOADING_PROJECTS':\n      return { ...state,\n        projects: [...state.projects],\n        loading: true\n      };\n\n    case 'ADD_PROJECTS':\n      // const reformatProjects = projects => {\n      //   return projects.map(proj => {\n      //     return { ...proj, stacks: proj.stacks.map(stack => Object.values(stack)).flat() }\n      //   })\n      // }\n      return { ...state,\n        projects: action.projects,\n        loading: false\n      };\n\n    case 'FILTER_PROJECTS':\n      const filteredProjects = state.projects.filter(proj => {\n        proj.stacks.filter(stack => stack.id === action.stack.id); // proj.stacks.some(s => action.stacks.indexOf(s) !== -1)\n      });\n      return { ...state,\n        projects: filteredProjects\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default projectsReducer;","map":{"version":3,"sources":["/Users/jackie.lam/Projects/portfolio/portfolio-frontend/src/reducers/projectsReducer.js"],"names":["projectsReducer","state","projects","stacks","comments","loading","action","type","filteredProjects","filter","proj","stack","id"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,eAAe,GAAG,CAACC,KAAK,GAAG;AAAEC,EAAAA,QAAQ,EAAE,EAAZ;AAAgBC,EAAAA,MAAM,EAAE,EAAxB;AAA4BC,EAAAA,QAAQ,EAAE,EAAtC;AAA0CC,EAAAA,OAAO,EAAE;AAAnD,CAAT,EAAqEC,MAArE,KAAgF;AACtG,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,gBAAL;AACE,aAAO,EACL,GAAGN,KADE;AAELE,QAAAA,MAAM,EAAE,CAAC,GAAGF,KAAK,CAACE,MAAV,CAFH;AAGLE,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAMF,SAAK,YAAL;AACE,aAAO,EACL,GAAGJ,KADE;AAELE,QAAAA,MAAM,EAAEG,MAAM,CAACH,MAFV;AAGLE,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAMF,SAAK,kBAAL;AACE,aAAO,EACL,GAAGJ,KADE;AAELC,QAAAA,QAAQ,EAAE,CAAC,GAAGD,KAAK,CAACC,QAAV,CAFL;AAGLG,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAMF,SAAK,cAAL;AACE;AACA;AACA;AACA;AACA;AACA,aAAO,EACL,GAAGJ,KADE;AAELC,QAAAA,QAAQ,EAAEI,MAAM,CAACJ,QAFZ;AAGLG,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAMF,SAAK,iBAAL;AACE,YAAMG,gBAAgB,GAAGP,KAAK,CAACC,QAAN,CAAeO,MAAf,CAAsBC,IAAI,IAAI;AACrDA,QAAAA,IAAI,CAACP,MAAL,CAAYM,MAAZ,CAAmBE,KAAK,IAAIA,KAAK,CAACC,EAAN,KAAaN,MAAM,CAACK,KAAP,CAAaC,EAAtD,EADqD,CAErD;AACD,OAHwB,CAAzB;AAIA,aAAO,EACL,GAAGX,KADE;AAELC,QAAAA,QAAQ,EAAEM;AAFL,OAAP;;AAIF;AACE,aAAOP,KAAP;AA5CJ;AA8CD,CA/CD;;AAkDA,eAAeD,eAAf","sourcesContent":["// when action is dispatched to reducer,\n// reducer is automatically passed previous state as 1st arg\n// Everytime we update sth in our store, this reducer will be returning the updated state\nconst projectsReducer = (state = { projects: [], stacks: [], comments: [], loading: false }, action) => {\n  switch (action.type) {\n    case 'LOADING_STACKS':\n      return {\n        ...state,\n        stacks: [...state.stacks],\n        loading: true\n      }\n\n    case 'ADD_STACKS':\n      return {\n        ...state,\n        stacks: action.stacks,\n        loading: false\n      }\n\n    case 'LOADING_PROJECTS':\n      return {\n        ...state,\n        projects: [...state.projects],\n        loading: true\n      }\n\n    case 'ADD_PROJECTS':\n      // const reformatProjects = projects => {\n      //   return projects.map(proj => {\n      //     return { ...proj, stacks: proj.stacks.map(stack => Object.values(stack)).flat() }\n      //   })\n      // }\n      return {\n        ...state,\n        projects: action.projects,\n        loading: false\n      }\n\n    case 'FILTER_PROJECTS':\n      const filteredProjects = state.projects.filter(proj => {\n        proj.stacks.filter(stack => stack.id === action.stack.id)\n        // proj.stacks.some(s => action.stacks.indexOf(s) !== -1)\n      })\n      return {\n        ...state,\n        projects: filteredProjects\n      }\n    default:\n      return state;\n  }\n}\n\n\nexport default projectsReducer;\n"]},"metadata":{},"sourceType":"module"}