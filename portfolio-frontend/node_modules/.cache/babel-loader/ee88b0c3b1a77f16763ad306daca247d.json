{"ast":null,"code":"// when action is dispatched to reducer,\n// reducer is automatically passed previous state as 1st arg\n// Everytime we update sth in our store, this reducer will be returning the updated state\nconst projectsReducer = (state = {\n  projects: [],\n  stacks: [],\n  selectedStackIds: [],\n  filteredProjects: [],\n  comments: [],\n  loading: false\n}, action) => {\n  switch (action.type) {\n    case 'LOADING_STACKS':\n      return { ...state,\n        stacks: [...state.stacks],\n        loading: true\n      };\n\n    case 'ADD_STACKS':\n      return { ...state,\n        stacks: action.stacks,\n        loading: false\n      };\n\n    case 'LOADING_PROJECTS':\n      return { ...state,\n        projects: [...state.projects],\n        loading: true\n      };\n\n    case 'ADD_PROJECTS':\n      return { ...state,\n        projects: action.projects,\n        filteredProjects: action.projects,\n        loading: false\n      };\n\n    case 'ADD_FILTER':\n      let filterProjects = state.filteredProjects.filter(proj => {\n        return proj.stacks.some(stack => stack.id.toString() === action.stackId);\n      });\n      return { ...state,\n        selectedStackIds: [...state.selectedStackIds, action.stackId],\n        filteredProjects: filterProjects\n      };\n\n    case 'REMOVE_FILTER':\n      // let refilteredProjects = state.projects.filter(proj => {\n      //   return proj.stacks.some(stack => stack.id.toString() === action.stackId)\n      // })\n      return { ...state,\n        selectedStackIds: state.selectedStackIds.filter(id => id !== action.stackId) // projects: refilteredProjects\n\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default projectsReducer;","map":{"version":3,"sources":["/Users/jackie.lam/Projects/portfolio/portfolio-frontend/src/reducers/projectsReducer.js"],"names":["projectsReducer","state","projects","stacks","selectedStackIds","filteredProjects","comments","loading","action","type","filterProjects","filter","proj","some","stack","id","toString","stackId"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,eAAe,GAAG,CAACC,KAAK,GAAG;AAAEC,EAAAA,QAAQ,EAAE,EAAZ;AAAgBC,EAAAA,MAAM,EAAE,EAAxB;AAA4BC,EAAAA,gBAAgB,EAAE,EAA9C;AAAkDC,EAAAA,gBAAgB,EAAE,EAApE;AAAwEC,EAAAA,QAAQ,EAAE,EAAlF;AAAsFC,EAAAA,OAAO,EAAE;AAA/F,CAAT,EAAiHC,MAAjH,KAA4H;AAClJ,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,gBAAL;AACE,aAAO,EACL,GAAGR,KADE;AAELE,QAAAA,MAAM,EAAE,CAAC,GAAGF,KAAK,CAACE,MAAV,CAFH;AAGLI,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAMF,SAAK,YAAL;AACE,aAAO,EACL,GAAGN,KADE;AAELE,QAAAA,MAAM,EAAEK,MAAM,CAACL,MAFV;AAGLI,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAMF,SAAK,kBAAL;AACE,aAAO,EACL,GAAGN,KADE;AAELC,QAAAA,QAAQ,EAAE,CAAC,GAAGD,KAAK,CAACC,QAAV,CAFL;AAGLK,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAMF,SAAK,cAAL;AACE,aAAO,EACL,GAAGN,KADE;AAELC,QAAAA,QAAQ,EAAEM,MAAM,CAACN,QAFZ;AAGLG,QAAAA,gBAAgB,EAAEG,MAAM,CAACN,QAHpB;AAILK,QAAAA,OAAO,EAAE;AAJJ,OAAP;;AAOF,SAAK,YAAL;AACE,UAAIG,cAAc,GAAGT,KAAK,CAACI,gBAAN,CAAuBM,MAAvB,CAA8BC,IAAI,IAAI;AACzD,eAAOA,IAAI,CAACT,MAAL,CAAYU,IAAZ,CAAiBC,KAAK,IAAIA,KAAK,CAACC,EAAN,CAASC,QAAT,OAAwBR,MAAM,CAACS,OAAzD,CAAP;AACD,OAFoB,CAArB;AAGA,aAAO,EACL,GAAGhB,KADE;AAELG,QAAAA,gBAAgB,EAAE,CAAC,GAAGH,KAAK,CAACG,gBAAV,EAA4BI,MAAM,CAACS,OAAnC,CAFb;AAGLZ,QAAAA,gBAAgB,EAAEK;AAHb,OAAP;;AAMF,SAAK,eAAL;AACE;AACA;AACA;AACA,aAAO,EACL,GAAGT,KADE;AAELG,QAAAA,gBAAgB,EAAEH,KAAK,CAACG,gBAAN,CAAuBO,MAAvB,CAA8BI,EAAE,IAAIA,EAAE,KAAKP,MAAM,CAACS,OAAlD,CAFb,CAGL;;AAHK,OAAP;;AAMF;AACE,aAAOhB,KAAP;AAnDJ;AAqDD,CAtDD;;AAyDA,eAAeD,eAAf","sourcesContent":["// when action is dispatched to reducer,\n// reducer is automatically passed previous state as 1st arg\n// Everytime we update sth in our store, this reducer will be returning the updated state\nconst projectsReducer = (state = { projects: [], stacks: [], selectedStackIds: [], filteredProjects: [], comments: [], loading: false }, action) => {\n  switch (action.type) {\n    case 'LOADING_STACKS':\n      return {\n        ...state,\n        stacks: [...state.stacks],\n        loading: true\n      }\n\n    case 'ADD_STACKS':\n      return {\n        ...state,\n        stacks: action.stacks,\n        loading: false\n      }\n\n    case 'LOADING_PROJECTS':\n      return {\n        ...state,\n        projects: [...state.projects],\n        loading: true\n      }\n\n    case 'ADD_PROJECTS':\n      return {\n        ...state,\n        projects: action.projects,\n        filteredProjects: action.projects,\n        loading: false\n      }\n\n    case 'ADD_FILTER':\n      let filterProjects = state.filteredProjects.filter(proj => {\n        return proj.stacks.some(stack => stack.id.toString() === action.stackId)\n      })\n      return {\n        ...state,\n        selectedStackIds: [...state.selectedStackIds, action.stackId],\n        filteredProjects: filterProjects,\n      }\n\n    case 'REMOVE_FILTER':\n      // let refilteredProjects = state.projects.filter(proj => {\n      //   return proj.stacks.some(stack => stack.id.toString() === action.stackId)\n      // })\n      return {\n        ...state,\n        selectedStackIds: state.selectedStackIds.filter(id => id !== action.stackId),\n        // projects: refilteredProjects\n      }\n\n    default:\n      return state;\n  }\n}\n\n\nexport default projectsReducer;\n"]},"metadata":{},"sourceType":"module"}