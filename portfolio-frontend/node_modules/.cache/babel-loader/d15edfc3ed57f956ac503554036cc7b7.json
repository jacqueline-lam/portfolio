{"ast":null,"code":"// Action Creator creates an action object\n// action obj will be dispatched to reducer ->\n// then return new ver. of our state based on sent action\nexport const fetchProjects = () => {\n  // Thunk allows us to return fn + fn receives store's dispatch as its arg\n  return dispatch => {\n    // action dispatched before to fetch() request is called\n    dispatch({\n      type: 'LOADING_PROJECTS'\n    }); // call fetch, dispatching returned data\n\n    fetch('http://localhost:3000/api/v1/projects') // we won't do anything with this data until we get resp back\n    // fetch returns Promise that resolves to Response\n    // .then method to attach a callback once our Promise has been fulfilled - parse JSON of resp\n    .then(resp => resp.json()) // execute asynchronous code, once resolved, we can use dispatch to update our store\n    // grab the actual collection of project objects\n    // call dispatch + send project JSON data to your store\n    // action dispatched along with a payload of the projects JSON collection\n    .then(respJSON => dispatch({\n      type: 'ADD_PROJECTS',\n      projects: respJSON\n    }));\n  };\n};","map":{"version":3,"sources":["/Users/jackie.lam/Projects/portfolio/portfolio-frontend/src/actions/fetchProjects.js"],"names":["fetchProjects","dispatch","type","fetch","then","resp","json","respJSON","projects"],"mappings":"AAAA;AACA;AACA;AAEA,OAAO,MAAMA,aAAa,GAAG,MAAM;AACjC;AACA,SAAQC,QAAD,IAAc;AACnB;AACAA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR,CAFmB,CAGnB;;AACAC,IAAAA,KAAK,CAAC,uCAAD,CAAL,CACE;AACA;AACA;AAHF,KAIGC,IAJH,CAIQC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAJhB,EAKE;AACA;AACA;AACA;AARF,KASGF,IATH,CASQG,QAAQ,IAAIN,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE,cAAR;AAAwBM,MAAAA,QAAQ,EAAED;AAAlC,KAAD,CAT5B;AAUD,GAdD;AAeD,CAjBM","sourcesContent":["// Action Creator creates an action object\n// action obj will be dispatched to reducer ->\n// then return new ver. of our state based on sent action\n\nexport const fetchProjects = () => {\n  // Thunk allows us to return fn + fn receives store's dispatch as its arg\n  return (dispatch) => {\n    // action dispatched before to fetch() request is called\n    dispatch({ type: 'LOADING_PROJECTS' });\n    // call fetch, dispatching returned data\n    fetch('http://localhost:3000/api/v1/projects')\n      // we won't do anything with this data until we get resp back\n      // fetch returns Promise that resolves to Response\n      // .then method to attach a callback once our Promise has been fulfilled - parse JSON of resp\n      .then(resp => resp.json())\n      // execute asynchronous code, once resolved, we can use dispatch to update our store\n      // grab the actual collection of project objects\n      // call dispatch + send project JSON data to your store\n      // action dispatched along with a payload of the projects JSON collection\n      .then(respJSON => dispatch({ type: 'ADD_PROJECTS', projects: respJSON }));\n  }\n}"]},"metadata":{},"sourceType":"module"}